###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class Answer(BaseModel):
    answer: str

class Choice(BaseModel):
    choice: str
    no_available_information: bool

class Entail(BaseModel):
    entail: str
    no_available_information: bool

class Judge(BaseModel):
    assessable: bool
    no_available_information: bool

class Judgement(BaseModel):
    answer: bool

class Multi(BaseModel):
    option: str
    no_available_information: bool

class Passage(BaseModel):
    passage: str

class Plan(BaseModel):
    step: str
    action: str

class Plans(BaseModel):
    plans: List["Plan"]

class QNer(BaseModel):
    name: str
    category: str

class QNers(BaseModel):
    output: List["QNer"]

class Reflection(BaseModel):
    thought_questions: List[str]

class SPOs(BaseModel):
    spos: List[str]

class Solve(BaseModel):
    answer: str

class SolveNoDocs(BaseModel):
    answer: str

class SolveNoSPO(BaseModel):
    answer: str

class Verifier(BaseModel):
    answer: str
    answered: bool
