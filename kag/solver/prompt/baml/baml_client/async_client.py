###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, TypeVar, Union, TypedDict, Type, Literal, cast
from typing_extensions import NotRequired
import pprint

import baml_py
from pydantic import BaseModel, ValidationError, create_model

from . import partial_types, types
from .types import Checked, Check
from .type_builder import TypeBuilder
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


OutputType = TypeVar('OutputType')


# Define the TypedDict with optional parameters having default values
class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]
    collector: NotRequired[Union[baml_py.baml_py.Collector, List[baml_py.baml_py.Collector]]]
class BamlAsyncClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager)

    @property
    def stream(self):
      return self.__stream_client


    
    async def DeduceChoice(
        self,
        instruction: str,memory: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Choice:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "DeduceChoice",
        {
          "instruction": instruction,"memory": memory,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Choice, raw.cast_to(types, types, partial_types, False))
    
    async def DeduceEntail(
        self,
        instruction: str,memory: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Entail:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "DeduceEntail",
        {
          "instruction": instruction,"memory": memory,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Entail, raw.cast_to(types, types, partial_types, False))
    
    async def DeduceJudge(
        self,
        instruction: str,memory: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Judge:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "DeduceJudge",
        {
          "instruction": instruction,"memory": memory,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Judge, raw.cast_to(types, types, partial_types, False))
    
    async def DeduceMultiChoice(
        self,
        instruction: str,memory: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Multi:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "DeduceMultiChoice",
        {
          "instruction": instruction,"memory": memory,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Multi, raw.cast_to(types, types, partial_types, False))
    
    async def LogicFromPlan(
        self,
        question: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Plans:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "LogicFromPlan",
        {
          "question": question,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Plans, raw.cast_to(types, types, partial_types, False))
    
    async def QuestionNER(
        self,
        schema: List[str],input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.QNers:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "QuestionNER",
        {
          "schema": schema,"input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.QNers, raw.cast_to(types, types, partial_types, False))
    
    async def RespExtractor(
        self,
        supporting_fact: str,instruction: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Passage:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "RespExtractor",
        {
          "supporting_fact": supporting_fact,"instruction": instruction,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Passage, raw.cast_to(types, types, partial_types, False))
    
    async def RespGenerator(
        self,
        memory: str,instruction: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Answer:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "RespGenerator",
        {
          "memory": memory,"instruction": instruction,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Answer, raw.cast_to(types, types, partial_types, False))
    
    async def RespJudge(
        self,
        memory: str,instruction: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Judgement:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "RespJudge",
        {
          "memory": memory,"instruction": instruction,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Judgement, raw.cast_to(types, types, partial_types, False))
    
    async def RespReflector(
        self,
        memory: str,instruction: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Reflection:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "RespReflector",
        {
          "memory": memory,"instruction": instruction,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Reflection, raw.cast_to(types, types, partial_types, False))
    
    async def RespVerifier(
        self,
        sub_instruction: str,supporting_fact: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Verifier:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "RespVerifier",
        {
          "sub_instruction": sub_instruction,"supporting_fact": supporting_fact,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Verifier, raw.cast_to(types, types, partial_types, False))
    
    async def SPORetrieval(
        self,
        question: str,mention: str,candis: List[str],
        baml_options: BamlCallOptions = {},
    ) -> types.SPOs:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "SPORetrieval",
        {
          "question": question,"mention": mention,"candis": candis,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.SPOs, raw.cast_to(types, types, partial_types, False))
    
    async def SolveQuestion(
        self,
        question: str,history: str,docs: str,knowledge_graph: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SolveNoSPO:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "SolveQuestion",
        {
          "question": question,"history": history,"docs": docs,"knowledge_graph": knowledge_graph,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.SolveNoSPO, raw.cast_to(types, types, partial_types, False))
    
    async def SolveQuestionNoDocs(
        self,
        question: str,history: str,knowledge_graph: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SolveNoDocs:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "SolveQuestionNoDocs",
        {
          "question": question,"history": history,"knowledge_graph": knowledge_graph,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.SolveNoDocs, raw.cast_to(types, types, partial_types, False))
    
    async def SolveQuestionNoSPO(
        self,
        question: str,history: str,docs: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SolveNoSPO:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "SolveQuestionNoSPO",
        {
          "question": question,"history": history,"docs": docs,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.SolveNoSPO, raw.cast_to(types, types, partial_types, False))
    


class BamlStreamClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def DeduceChoice(
        self,
        instruction: str,memory: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Choice, types.Choice]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "DeduceChoice",
        {
          "instruction": instruction,
          "memory": memory,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Choice, types.Choice](
        raw,
        lambda x: cast(partial_types.Choice, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Choice, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def DeduceEntail(
        self,
        instruction: str,memory: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Entail, types.Entail]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "DeduceEntail",
        {
          "instruction": instruction,
          "memory": memory,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Entail, types.Entail](
        raw,
        lambda x: cast(partial_types.Entail, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Entail, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def DeduceJudge(
        self,
        instruction: str,memory: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Judge, types.Judge]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "DeduceJudge",
        {
          "instruction": instruction,
          "memory": memory,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Judge, types.Judge](
        raw,
        lambda x: cast(partial_types.Judge, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Judge, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def DeduceMultiChoice(
        self,
        instruction: str,memory: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Multi, types.Multi]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "DeduceMultiChoice",
        {
          "instruction": instruction,
          "memory": memory,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Multi, types.Multi](
        raw,
        lambda x: cast(partial_types.Multi, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Multi, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def LogicFromPlan(
        self,
        question: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Plans, types.Plans]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "LogicFromPlan",
        {
          "question": question,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Plans, types.Plans](
        raw,
        lambda x: cast(partial_types.Plans, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Plans, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def QuestionNER(
        self,
        schema: List[str],input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.QNers, types.QNers]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "QuestionNER",
        {
          "schema": schema,
          "input": input,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.QNers, types.QNers](
        raw,
        lambda x: cast(partial_types.QNers, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.QNers, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def RespExtractor(
        self,
        supporting_fact: str,instruction: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Passage, types.Passage]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "RespExtractor",
        {
          "supporting_fact": supporting_fact,
          "instruction": instruction,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Passage, types.Passage](
        raw,
        lambda x: cast(partial_types.Passage, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Passage, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def RespGenerator(
        self,
        memory: str,instruction: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Answer, types.Answer]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "RespGenerator",
        {
          "memory": memory,
          "instruction": instruction,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Answer, types.Answer](
        raw,
        lambda x: cast(partial_types.Answer, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Answer, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def RespJudge(
        self,
        memory: str,instruction: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Judgement, types.Judgement]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "RespJudge",
        {
          "memory": memory,
          "instruction": instruction,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Judgement, types.Judgement](
        raw,
        lambda x: cast(partial_types.Judgement, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Judgement, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def RespReflector(
        self,
        memory: str,instruction: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Reflection, types.Reflection]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "RespReflector",
        {
          "memory": memory,
          "instruction": instruction,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Reflection, types.Reflection](
        raw,
        lambda x: cast(partial_types.Reflection, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Reflection, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def RespVerifier(
        self,
        sub_instruction: str,supporting_fact: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Verifier, types.Verifier]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "RespVerifier",
        {
          "sub_instruction": sub_instruction,
          "supporting_fact": supporting_fact,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Verifier, types.Verifier](
        raw,
        lambda x: cast(partial_types.Verifier, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Verifier, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def SPORetrieval(
        self,
        question: str,mention: str,candis: List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.SPOs, types.SPOs]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "SPORetrieval",
        {
          "question": question,
          "mention": mention,
          "candis": candis,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.SPOs, types.SPOs](
        raw,
        lambda x: cast(partial_types.SPOs, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.SPOs, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def SolveQuestion(
        self,
        question: str,history: str,docs: str,knowledge_graph: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.SolveNoSPO, types.SolveNoSPO]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "SolveQuestion",
        {
          "question": question,
          "history": history,
          "docs": docs,
          "knowledge_graph": knowledge_graph,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.SolveNoSPO, types.SolveNoSPO](
        raw,
        lambda x: cast(partial_types.SolveNoSPO, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.SolveNoSPO, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def SolveQuestionNoDocs(
        self,
        question: str,history: str,knowledge_graph: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.SolveNoDocs, types.SolveNoDocs]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "SolveQuestionNoDocs",
        {
          "question": question,
          "history": history,
          "knowledge_graph": knowledge_graph,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.SolveNoDocs, types.SolveNoDocs](
        raw,
        lambda x: cast(partial_types.SolveNoDocs, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.SolveNoDocs, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def SolveQuestionNoSPO(
        self,
        question: str,history: str,docs: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.SolveNoSPO, types.SolveNoSPO]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)
      collector = baml_options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "SolveQuestionNoSPO",
        {
          "question": question,
          "history": history,
          "docs": docs,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.SolveNoSPO, types.SolveNoSPO](
        raw,
        lambda x: cast(partial_types.SolveNoSPO, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.SolveNoSPO, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    

b = BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)

__all__ = ["b"]