###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, Generic, List, Optional, TypeVar, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class Answer(BaseModel):
    answer: Optional[str] = None

class Choice(BaseModel):
    choice: Optional[str] = None
    no_available_information: Optional[bool] = None

class Entail(BaseModel):
    entail: Optional[str] = None
    no_available_information: Optional[bool] = None

class Judge(BaseModel):
    assessable: Optional[bool] = None
    no_available_information: Optional[bool] = None

class Judgement(BaseModel):
    answer: Optional[bool] = None

class Multi(BaseModel):
    option: Optional[str] = None
    no_available_information: Optional[bool] = None

class Passage(BaseModel):
    passage: Optional[str] = None

class Plan(BaseModel):
    step: Optional[str] = None
    action: Optional[str] = None

class Plans(BaseModel):
    plans: List["Plan"]

class QNer(BaseModel):
    name: Optional[str] = None
    category: Optional[str] = None

class QNers(BaseModel):
    output: List["QNer"]

class Reflection(BaseModel):
    thought_questions: List[str]

class SPOs(BaseModel):
    spos: List[str]

class Solve(BaseModel):
    answer: Optional[str] = None

class SolveNoDocs(BaseModel):
    answer: Optional[str] = None

class SolveNoSPO(BaseModel):
    answer: Optional[str] = None

class Verifier(BaseModel):
    answer: Optional[str] = None
    answered: Optional[bool] = None
