###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\nclient<llm> Ollama {\n  provider \"openai-generic\"\n  options {\n    base_url \"http://192.168.1.188:11434/v1/\"\n    model \"gemma3:27b\"\n  }\n}\n\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.78.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "sematic_seg_prompt.baml": "class Segment {\n  summary string @description(#\"\n    A brief summary of the section text\"\n  \"#)\n  starting_point string @description(#\"\n    The starting point of the summarized section in the original text, limited to about 4 words exactly from the original. Do not use your own knowledge.  Do not correct the original in any way. This segmentation point will be used to split the original text, so it must be found in the original text!\n  \"#)\n}\n\nclass Segments {\n  segments Segment[]\n}\n\n// Create a function to extract the resume from a string.\nfunction SemanticSegmentClarify(chunk: string, segment: string) -> Segment {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"Ollama\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    The segment provided was extracted from the passage below, please correct the segment to match the passage exactly word for word. Do not use your own knowledge.\n\n    Segment:\n\n    {{ segment }}\n\n    Passage:\n\n    {{ chunk }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n\n// Create a function to extract the resume from a string.\nfunction SemanticSegment(chunk: string) -> Segments {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"Ollama\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n  Please understand the content of the text in the input field, recognize the structure and components of the text, and determine the segmentation points according to the semantic theme, dividing it into several non-overlapping sections. If the article has recognizable structural information such as chapters, please divide it according to the top-level structure. Please return the results according to the schema definition, including summaries and starting points of the sections. The format must be a JSON string. Please follow the examples given in the example field.\n\n  Examples:\n\n    [\n        {\n            \"input\": \"Jay Chou (Jay Chou), born on January 18, 1979, in Xinbei City, Taiwan Province, originally from Yongchun County, Fujian Province, is a Mandopop male singer, musician, actor, director, screenwriter, and a graduate of Tamkang Senior High School.\\nIn 2000, recommended by Yang Junrong, Jay Chou started singing his own compositions.\",\n            \"output\": [\n                {\n                    \"summary\": \"Personal Introduction\",\n                    \"starting_point\": \"Jay Chou (Jay Chou), born on January 18\"\n                },\n                {\n                    \"summary\": \"Career Start\",\n                    \"starting_point\": \"\\nIn 2000, recommended by Yang Junrong\"\n                }\n            ]\n        },\n        {\n            \"input\": \"Hangzhou Flexible Employment Personnel Housing Provident Fund Management Measures (Trial)\\nTo expand the benefits of the housing provident fund system and support flexible employment personnel to solve housing problems, according to the State Council's 'Housing Provident Fund Management Regulations', 'Zhejiang Province Housing Provident Fund Regulations' and the relevant provisions and requirements of the Ministry of Housing and Urban-Rural Development and the Zhejiang Provincial Department of Housing and Urban-Rural Development on flexible employment personnel participating in the housing provident fund system, combined with the actual situation in Hangzhou, this method is formulated.\\n This method applies to the voluntary deposit, use, and management of the housing provident fund for flexible employment personnel within the administrative region of this city.\\nThe flexible employment personnel referred to in this method are those who are within the administrative region of this city, aged 16 and above, and males under 60 and females under 55, with full civil capacity, and employed in a flexible manner such as part-time, self-employed, or in new forms of employment.\\nFlexible employment personnel applying to deposit the housing provident fund should apply to the Hangzhou Housing Provident Fund Management Center (hereinafter referred to as the Provident Fund Center) for deposit registration procedures and set up personal accounts.\",\n            \"output\": [\n                {\n                    \"summary\": \"Background and Basis for Formulating the Management Measures\",\n                    \"starting_point\": \"To expand the benefits of the housing provident fund system\"\n                },\n                {\n                    \"summary\": \"Scope of Application of the Management Measures\",\n                    \"starting_point\": \"This method applies to the voluntary deposit\"\n                },\n                {\n                    \"summary\": \"Definition of Flexible Employment Personnel\",\n                    \"starting_point\": \"The flexible employment personnel referred to in this method\"\n                },\n                {\n                    \"summary\": \"Procedures for Flexible Employment Personnel to Register for Deposit\",\n                    \"starting_point\": \"Flexible employment personnel applying to deposit the housing provident fund\"\n                }\n            ]\n        }\n    ]   \n\n    Extract from this content:\n\n    {{ chunk }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest laibhav_resume {\n  functions [SemanticSegment]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
}

def get_baml_files():
    return file_map